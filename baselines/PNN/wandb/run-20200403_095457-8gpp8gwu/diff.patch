diff --git a/train.py b/train.py
index b24ec13..3ea0cac 100644
--- a/train.py
+++ b/train.py
@@ -27,65 +27,6 @@ flags.DEFINE_integer("eval_save_period", 1, "how often we save state for eval")
 flags.DEFINE_integer("num_envs", 1, "number of envs")
 flags.DEFINE_string("target_env", "", "Name of target environment")
 flags.DEFINE_string("source_env", "", "Name of source environment")
-
-
-def find_best(dir_name):
-    def compare(item):
-        return item[0]
-    model_list = []
-    for file_name in os.listdir(dir_name):
-        if '.pkl' in file_name and ('final' not in file_name) and ('best_model' not in file_name):
-            model_list.append([float(file_name.split('_')[2].split('.')[0]), int(file_name.split('_')[1]), file_name])
-    best_model = max(model_list, key=compare)
-    return os.path.join(dir_name, best_model[2]), best_model[1]
-
-class RewardCurriculum(object):
-    """
-    Code related to training reward curriculum or single domain
-    """
-
-    def __init__(self, model_type, model_dir, num_envs, experiment_dir, experiment_name, timesteps, is_save, eval_save_period):
-        self.model_type = "PPO"
-        
-
-
-def find_best(dir_name):
-    def compare(item):
-        return item[0]
-    model_list = []
-    for file_name in os.listdir(dir_name):
-        if '.pkl' in file_name and ('final' not in file_name) and ('best_model' not in file_name):
-            model_list.append([float(file_name.split('_')[2].split('.')[0]), int(file_name.split('_')[1]), file_name])
-    best_model = max(model_list, key=compare)
-    return os.path.join(dir_name, best_model[2]), best_model[1]
-
-class RewardCurriculum(object):
-    """
-    Code related to training reward curriculum or single domain
-    """
-
-    def __init__(self, model_type, model_dir, num_envs, experiment_dir, experiment_name, timesteps, is_save, eval_save_period):
-        self.model_type = "PPO"
-        
-
-
-def find_best(dir_name):
-    def compare(item):
-        return item[0]
-    model_list = []
-    for file_name in os.listdir(dir_name):
-        if '.pkl' in file_name and ('final' not in file_name) and ('best_model' not in file_name):
-            model_list.append([float(file_name.split('_')[2].split('.')[0]), int(file_name.split('_')[1]), file_name])
-    best_model = max(model_list, key=compare)
-    return os.path.join(dir_name, best_model[2]), best_model[1]
-
-class RewardCurriculum(object):
-    """
-    Code related to training reward curriculum or single domain
-    """
-
-    def __init__(self, model_type, model_dir, num_envs, experiment_dir, experiment_name, timesteps, is_save, eval_save_period):
-        self.model_type = "PPO"
         
 
 
@@ -270,14 +211,15 @@ if __name__ == '__main__':
         model = ('output/gridworld_continuous', 'multi_obj_policies', 'lr_policy.pkl')
     elif 'RR' in FLAGS.source_env and 'None' in FLAGS.target_env:
         model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_policy.pkl')
-    if 'LL' in FLAGS.source_env and 'LR' in FLAGS.target_env:
-        model = ('output/gridworld_continuous', 'multi_obj_policies', 'll_lr_none1_256.pkl')
-    elif 'LL' in FLAGS.source_env and 'RL' in FLAGS.target_env:
-        model = ('output/gridworld_continuous', 'multi_obj_policies', 'll_rl_none1_24448.pkl')
-    elif 'RR' in FLAGS.source_env and 'LR' in FLAGS.target_env:
-        model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_lr_none1_4864.pkl')
-    elif 'RR' in FLAGS.source_env and 'RL' in FLAGS.target_env:
-        model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_rl_none1_896.pkl')
+    else:
+        if 'LL' in FLAGS.source_env and 'LR' in FLAGS.target_env:
+            model = ('output/gridworld_continuous', 'multi_obj_policies', 'll_lr_none1_256.pkl')
+        elif 'LL' in FLAGS.source_env and 'RL' in FLAGS.target_env:
+            model = ('output/gridworld_continuous', 'multi_obj_policies', 'll_rl_none1_24448.pkl')
+        elif 'RR' in FLAGS.source_env and 'LR' in FLAGS.target_env:
+            model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_lr_none1_4864.pkl')
+        elif 'RR' in FLAGS.source_env and 'RL' in FLAGS.target_env:
+            model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_rl_none1_896.pkl')
     #model = ('output/gridworld_continuous', 'multi_obj_policies', 'rl_policy.pkl')
     #model = ('output/gridworld_continuous', 'multi_obj_policies', 'lr_policy.pkl')
     #model = ('output/gridworld_continuous', 'multi_obj_policies', 'rr_policy.pkl')
